
import { degreesToRadians } from "../Components/MathCalc";
class Rudder {

  constructor(shipLength, shipBeam, shipMass,guifolder) {
    this.shipLength = shipLength;
    this.shipMass=shipMass;
    this.rudderAngle = 0; // Rudder angle in radians
    this.rudderForceCoefficient = 1.0; // Realistic rudder force coefficient
    this.rudderArea = 0.015 * shipBeam * shipLength; // 1.5% of the submerged lateral area
    this.rudderDistance = shipLength * 0.9; // Assume rudder is at 90% of the ship length
    this.shipInertia = (1 / 2400) * shipMass * (shipLength ** 2 + shipBeam ** 2); // Moment of inertia for yaw
    // this.shipInertia = (1 / 12) * shipMass * (shipBeam/2) ** 2; // Moment of inertia for yaw
    this.angularVelocity = 0; // Initial angular velocity
    guifolder
      .add(this, "rudderAngle", -45, 45, 10)
  }
  updateMass(newMass) {
    this.shipMass = newMass;
}
  // Update rudder angle based on user input
  // updateAngle(rudderInput) {
  //   this.angle = rudderInput; // Assuming rudderInput is in radians
  // }

  // Calculate the turning moment generated by the rudder
  calculateTurningMoment(velocity) {
    const rudderForce =
      this.rudderForceCoefficient *
      this.rudderArea *
      velocity.lengthSq()*
      Math.sin(degreesToRadians(this.rudderAngle));
    const rudderDistance = this.shipLength * 0.5; // Assume rudder is at the m of the ship length
    const moment = rudderForce * rudderDistance;
    //    console.log(velocity.lengthSq())

    return moment;
  }

  // Update ship's yaw based on the turning moment
  updateYaw(deltaTime, velocity) {
    const moment = this.calculateTurningMoment(velocity, this.shipMass);
//    console.log(this.shipMass)
//    console.log(moment)

    const angularAcceleration = moment / this.shipInertia;

   return angularAcceleration 
  }
}

export default Rudder;
